{
  
    
        "post0": {
            "title": "Lists and Dictionary Hacks",
            "content": "Reversed Numbers . num = [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, &quot;five&quot;, &quot;six&quot;] numC = 0k for x in reversed(num): if numC-2&lt;len(num): print(&quot;- num[&quot;,numC,&quot;]&quot;, x, type(num[numC])) numC += 1 . - num[ 0 ] six &lt;class &#39;str&#39;&gt; - num[ 1 ] five &lt;class &#39;str&#39;&gt; - num[ 2 ] four &lt;class &#39;str&#39;&gt; - num[ 3 ] three &lt;class &#39;str&#39;&gt; - num[ 4 ] two &lt;class &#39;str&#39;&gt; - num[ 5 ] one &lt;class &#39;str&#39;&gt; . New Record and Input record . import getpass, sys InfoDb = [] InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Sunny&quot;, &quot;LastName&quot;: &quot;Naidu&quot;, &quot;DOB&quot;: &quot;August 2&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;Email&quot;: &quot;snaidu@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;4Runner&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Sarah&quot;, &quot;LastName&quot;: &quot;Liu&quot;, &quot;DOB&quot;: &quot;January 12&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;mail2sarahl@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;2010 Lexus IS 250&quot;] }) def collect_data(): print(&quot;Please enter your first name:&quot;) fn = input() print(fn) print(&quot;Please enter your last name:&quot;) ln = input() print(ln) print(&quot;Please enter your date of birth:&quot;) dob = input() print(dob) print(&quot;Please enter your county:&quot;) county = input() print(county) print(&quot;Please enter your favorite color:&quot;) color = input() print(color) print(&quot;Please input your favorite movie:&quot;) movie = input() print(movie) print(&quot;Please input your owned cars:&quot;) Owns_Cars = input() print(Owns_Cars) # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: fn, &quot;LastName&quot;: ln, &quot;DOB&quot;: dob, &quot;Residence&quot;: county, &quot;Fav_Color&quot;: color, &quot;Fav_movie&quot;: movie, &quot;Owns_Cars&quot;: Owns_Cars }) def more_info(): while True: ans = input(&quot;Do you want to add more info to the database? &quot;) if ans == &quot;yes&quot;: name = True collect_data() #collect data if input is &quot;yes&quot; print() else: #stop function if input isn&#39;t &quot;yes&quot; break # Print the data structure print(InfoDb) . Amay Please enter your last name: Advani Please enter your date of birth: june 10 Please enter your county: San Diego Please enter your favorite color: Blue Please input your favorite movie: Harry potter Please input your owned cars: 2012 prius [{&#39;FirstName&#39;: &#39;John&#39;, &#39;LastName&#39;: &#39;Mortensen&#39;, &#39;DOB&#39;: &#39;October 21&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;jmortensen@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;2015-Fusion&#39;, &#39;2011-Ranger&#39;, &#39;2003-Excursion&#39;, &#39;1997-F350&#39;, &#39;1969-Cadillac&#39;]}, {&#39;FirstName&#39;: &#39;Sunny&#39;, &#39;LastName&#39;: &#39;Naidu&#39;, &#39;DOB&#39;: &#39;August 2&#39;, &#39;Residence&#39;: &#39;Temecula&#39;, &#39;Email&#39;: &#39;snaidu@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;4Runner&#39;]}, {&#39;FirstName&#39;: &#39;Sarah&#39;, &#39;LastName&#39;: &#39;Liu&#39;, &#39;DOB&#39;: &#39;January 12&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;mail2sarahl@gmail.com&#39;, &#39;Owns_Cars&#39;: [&#39;2010 Lexus IS 250&#39;]}, {&#39;FirstName&#39;: &#39;Amay &#39;, &#39;LastName&#39;: &#39;Advani&#39;, &#39;DOB&#39;: &#39;june 10&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Fav_Color&#39;: &#39;Blue&#39;, &#39;Fav_movie&#39;: &#39;Harry potter&#39;, &#39;Owns_Cars&#39;: &#39;2012 prius&#39;}] . For Loop through index . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;,d_rec[&quot;Owns_Cars&quot;]) # end=&quot;&quot; make sure no return occurs # print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: [&#39;2015-Fusion&#39;, &#39;2011-Ranger&#39;, &#39;2003-Excursion&#39;, &#39;1997-F350&#39;, &#39;1969-Cadillac&#39;] Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: [&#39;4Runner&#39;] Sarah Liu Residence: San Diego Birth Day: January 12 Cars: [&#39;2010 Lexus IS 250&#39;] Amay Advani Residence: San Diego Birth Day: June 10 Cars: 2012 Prius . Quiz that Stores in list/dictionaries . questions = 6 correct = 0 def question_and_answer(prompt, answer): print(&quot;Question: &quot; + prompt) inp = input() print(&quot;Answer: &quot; + inp) if answer == inp.lower(): print(&quot;Good Job! That is the right answer!&quot;) global correct correct += 1 else: print (&quot;That is Wrong!&quot;) return inp Question1 = question_and_answer(&quot;Which country gifted the Statue of Liberty to the US? t 1 for France t 2 for England t 3 for Germany t 4 or Italy&quot;, &quot;1&quot;) Question2 = question_and_answer(&quot;What is the name of the longest river in South America? t 1 for Mississippi River t 2 for Amazon River&quot;, &quot;2&quot;) Question3 = question_and_answer(&quot;Which fictional city is the home of Batman? t 1 for San Diego t 2 for Central City t 3 for Gotham City &quot;, &quot;3&quot;) Question4 = question_and_answer(&quot;How many feet are in a mile?&quot;, &quot;5280&quot;) Question5 = question_and_answer(&quot; Who is the author of the Harry Potter series t 1 for JK Rowling t 2 for Rick Riordan t 3 for William Shakespeare&quot;, &quot;1&quot;) Q6 = question_and_answer(&quot;What number is the iron in the periodic table of elements?&quot;, &quot;26&quot;) print(correct, &quot;answers correct&quot;, correct*100/questions,&quot;%&quot;) Quiz = { &quot;Question One&quot;: Question1 , &quot;Question Two&quot;: Question2 , &quot;Question Three &quot;: Question3, &quot;Question Four &quot;: Question4, &quot;Question Five&quot;: Question5, &quot;Question Six&quot;: Q6 } print(&quot;Your answers:&quot;,Quiz) . Question: Which country gifted the Statue of Liberty to the US? 1 for France 2 for England 3 for Germany 4 or Italy Answer: 1 Good Job! That is the right answer! Question: What is the name of the longest river in South America? 1 for Mississippi River 2 for Amazon River Answer: 2 Good Job! That is the right answer! Question: Which fictional city is the home of Batman? 1 for San Diego 2 for Central City 3 for Gotham City Answer: 3 Good Job! That is the right answer! Question: How many feet are in a mile? Answer: 5820 That is Wrong! Question: Who is the author of the Harry Potter series 1 for JK Rowling 2 for Rick Riordan 3 for William Shakespeare Answer: 1 Good Job! That is the right answer! Question: What number is the iron in the periodic table of elements? Answer: 26 Good Job! That is the right answer! 5 answers correct 83.33333333333333 % Your answers: {&#39;Question One&#39;: &#39;1&#39;, &#39;Question Two&#39;: &#39;2&#39;, &#39;Question Three &#39;: &#39;3&#39;, &#39;Question Four &#39;: &#39;5820&#39;, &#39;Question Five&#39;: &#39;1&#39;, &#39;Question Six&#39;: &#39;26&#39;} . Hacks . Add a couple of records to the InfoDb | Try to do a for loop with an index | Pair Share code somethings creative or unique, with loops and data. Hints... Would it be possible to output data in a reverse order? | Are there other methods that can be performed on lists? | Could you create new or add to dictionary data set? Could you do it with input? | Make a quiz that stores in a List of Dictionaries. | . | .",
            "url": "https://amayadvani.github.io/fastpages/jupyter/week2/2022/08/29/TP120-python_lists.html",
            "relUrl": "/jupyter/week2/2022/08/29/TP120-python_lists.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Installation Checks",
            "content": "Python Checks . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Conda Packages . conda list . # packages in environment at /home/amaya/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 3.1.2 pypi_0 pypi jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter-core 4.11.1 pypi_0 pypi jupyter-server 1.18.1 pypi_0 pypi jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.5.3 pypi_0 pypi nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tinycss2 1.1.1 pypi_0 pypi tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 voila 0.3.6 pypi_0 pypi w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 websockets 10.3 pypi_0 pypi werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39h06a4308_7 jupyter-core 4.11.1 pypi_0 pypi jupyter-server 1.18.1 pypi_0 pypi jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . Jupyter Checks . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.4.0 Traceback (most recent call last): File &#34;/home/amaya/.local/bin/jupyter&#34;, line 8, in &lt;module&gt; sys.exit(main()) File &#34;/home/amaya/.local/lib/python3.8/site-packages/jupyter_core/command.py&#34;, line 202, in main mod = __import__(package) File &#34;/home/amaya/.local/lib/python3.8/site-packages/ipykernel/__init__.py&#34;, line 5, in &lt;module&gt; from .connect import * # noqa File &#34;/home/amaya/.local/lib/python3.8/site-packages/ipykernel/connect.py&#34;, line 11, in &lt;module&gt; import jupyter_client File &#34;/home/amaya/.local/lib/python3.8/site-packages/jupyter_client/__init__.py&#34;, line 8, in &lt;module&gt; from .asynchronous import AsyncKernelClient # noqa File &#34;/home/amaya/.local/lib/python3.8/site-packages/jupyter_client/asynchronous/__init__.py&#34;, line 1, in &lt;module&gt; from .client import AsyncKernelClient # noqa File &#34;/home/amaya/.local/lib/python3.8/site-packages/jupyter_client/asynchronous/client.py&#34;, line 6, in &lt;module&gt; from jupyter_client.channels import HBChannel File &#34;/home/amaya/.local/lib/python3.8/site-packages/jupyter_client/channels.py&#34;, line 15, in &lt;module&gt; from .session import Session File &#34;/home/amaya/.local/lib/python3.8/site-packages/jupyter_client/session.py&#34;, line 50, in &lt;module&gt; from zmq.eventloop.zmqstream import ZMQStream File &#34;/home/amaya/.local/lib/python3.8/site-packages/zmq/eventloop/zmqstream.py&#34;, line 40, in &lt;module&gt; from tornado.stack_context import wrap as stack_context_wrap # type: ignore File &#34;&lt;frozen importlib._bootstrap&gt;&#34;, line 991, in _find_and_load File &#34;&lt;frozen importlib._bootstrap&gt;&#34;, line 971, in _find_and_load_unlocked File &#34;&lt;frozen importlib._bootstrap&gt;&#34;, line 908, in _find_spec KeyboardInterrupt . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /home/amaya/.local/share/jupyter/kernels/python3 .",
            "url": "https://amayadvani.github.io/fastpages/jupyter/week1/2022/08/28/tool_check.html",
            "relUrl": "/jupyter/week1/2022/08/28/tool_check.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Amay's Python Vocab Quiz",
            "content": "import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg # defining q and c as question and correct answer q = 6 c = 0 # setting up the of the questions print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(q) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) # asking 6 question rsp = question_with_response(&quot;What command is used to include other functions that were previously developed?&quot;) if rsp == &quot;import&quot;: print(rsp + &quot; is correct!&quot;) c += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What command is used to evaluate correct or incorrect response in this example?&quot;) if rsp == &quot;if&quot;: print(rsp + &quot; is correct!&quot;) c += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;) if rsp == &quot;expression&quot;: print(rsp + &quot; is correct!&quot;) c += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What is another word for putting data into you computer?&quot;) if rsp == &quot;input&quot;: print(rsp+ &quot; is correct!&quot;) c += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;If you see several lines of code in order, what is it known as?&quot;) if rsp == &quot;sequence&quot;: print(rsp + &quot; is correct!&quot;) c += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What is a Print Working Directory known as?&quot;) if rsp == &quot;pwd&quot;: print(rsp + &quot; is correct!&quot;) c += 1 else: print(rsp + &quot; is incorrect!&quot;) # creating ratio/percentages between c and q print(getpass.getuser() + &quot; you scored &quot; + str(c) +&quot;/&quot; + str(q)) y = c/q x = int (100*y) print(&quot;Or &quot; + str(x) + &quot;%&quot;) . Hello, amaya running /bin/python3 You will be asked 6 questions. Question: Are you ready to take a test? Answer: yes Question: What command is used to include other functions that were previously developed? import is correct! Question: What command is used to evaluate correct or incorrect response in this example? if is correct! Question: Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? expression is correct! Question: What is another word for putting data into you computer? input is correct! Question: If you see several lines of code in order, what is it known as? sequen is incorrect! Question: What is a Print Working Directory known as? pwd is correct! amaya you scored 5/6 Or 83% .",
            "url": "https://amayadvani.github.io/fastpages/2022/08/26/python-hacks.html",
            "relUrl": "/2022/08/26/python-hacks.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Amay Advani Marketing Economics Slogan Assignment",
            "content": "Old Spice Slogan . Old Spice Advertising Firm Partners: Amay Advani, Felipe Martinez . The Old Spice Advertising Firm, has developed an appropriate new slogan for Old Spice . Stay Fresh . . We developed our slogan “Stay Fresh” through brainstorming appropriate and new ideas that will be best fitting, and gender neutral. Our new slogan is consistent and is memorable, while using short, attractive words to describe our clients’ product. Our slogan is authentic by being honest when using our slogan. Our targeted audience are teens and young adults, so by advertising our product to people who need it, it keeps the product and slogan relevant. Along with all of that, our slogan also hits our targeted audience. Our product is mostly for teenagers, and for young adults, our product is marketed for the group because deodorant, hair products, and body products, is for every growing man. . We decided to start with stay in our slogan because it induces confidence in the consumer because it states that the viewer is already fresh, due to the infinitive present participle tense of the word stay. Secondly, the word fresh is a short and sweet descriptive word that keeps our product authentic and honest. Together, the words stay and fresh are short, memorable, and stays true to our clients product and business. . Our Canva Poster uses red throughout and images from the Old Spice company to stay consistent using their logos and colors. In addition, it includes products and the link to their website. .",
            "url": "https://amayadvani.github.io/fastpages/markdown/week1/2022/08/25/marketing-econ.html",
            "relUrl": "/markdown/week1/2022/08/25/marketing-econ.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Amay's Notebook",
            "content": "import random # What are the chances game a = input(&quot;Enter a value from 1 - 10: &quot;) b = random.randint(1,10) if a==b : print(&quot;Good Job, you won!&quot;) else : print(&quot;You lost! Try again to win.&quot;) print(&quot;You inputed : &quot;) print(a) print(&quot;The answer was :&quot;) print (b) . You lost! Try again to win. You inputed : 10 The answer was : 6 . Please like and subscribe! . print(&quot;Hello Sir, how are you doing today?&quot;) . Hello Sir, how are you doing today? .",
            "url": "https://amayadvani.github.io/fastpages/juypter/week0/2022/08/21/notebook.html",
            "relUrl": "/juypter/week0/2022/08/21/notebook.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Goals for APCSP",
            "content": "Made by: Amay Advani . Hello my name is Amay Advani and I am a Junior at Del Norte Highschool. . Goals for AP CSP Trimester #1 . Get and A overall | Learn/expand my coding orientation and experience | Prepare myself for another college level course | Footnotes .",
            "url": "https://amayadvani.github.io/fastpages/markdown/week0/2022/08/21/markdown-post.html",
            "relUrl": "/markdown/week0/2022/08/21/markdown-post.html",
            "date": " • Aug 21, 2022"
        }
        
    
  

  
  
      ,"page0": {
          "title": "Class Weeks",
          "content": "Week 3 Week 2 Week 1 Week 0 .   | List and Dictionary Hack | Class Weeks | Jupyter Notebook | .   |   | Marketing Econ | My Goals for APCSP and my first markdown post | .   |   | Python Quiz | About Me | .   |   | Bash Tool Check |   | .   |   | Vocab for APCSP |   | .",
          "url": "https://amayadvani.github.io/fastpages/_pages/2022-class-weeks.html",
          "relUrl": "/_pages/2022-class-weeks.html",
          "date": ""
      }
      
  

  

  
      ,"page2": {
          "title": "About Me",
          "content": "My Name is Amay Advani and I am a Junior at Del Norte High School! . This website is powered by Amay Advani 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://amayadvani.github.io/fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
      ,"page8": {
          "title": "Vocab",
          "content": "input = something that the user types in through code or the input function . output = some thing that the input function sparks . sequence = several lines of code together . front matter = section of code that is on top of files with key-values . variable = word used as a container to hold information . string = series of characters . boolean = value that is either true or false .",
          "url": "https://amayadvani.github.io/fastpages/vocab/",
          "relUrl": "/vocab/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://amayadvani.github.io/fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}